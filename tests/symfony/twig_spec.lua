local fixturesLoader = require("tests/fixtures/load")
local twig = require("symfony.twig")
local utils = require("symfony.utils")

describe("twig functions", function()
  before_each(function()
    twig.cache_clear()
  end)

  it("should filter all functions", function()
    local fake_dump = fixturesLoader.twig()
    twig.cache_update(fake_dump)
    local actual = twig.filter_functions()
    assert.is_equal(vim.tbl_count(actual), 11)
  end)

  it("should filter function by name", function()
    local fake_dump = fixturesLoader.twig()
    twig.cache_update(fake_dump)
    local actual = twig.filter_functions("max")
    assert.is_equal(vim.tbl_count(actual), 2)
  end)

  it("find one should return not nil", function()
    local fake_dump = fixturesLoader.twig()
    twig.cache_update(fake_dump)
    local actual = twig.find_one_function("max")
    assert.is_not_nil(actual)
  end)
end)

describe("twig filters", function()
  before_each(function()
    twig.cache_clear()
  end)

  it("should filter all filters", function()
    local fake_dump = fixturesLoader.twig()
    twig.cache_update(fake_dump)
    local actual = twig.filter_filters()
    assert.is_equal(vim.tbl_count(actual), 6)
  end)

  it("should filter filters by name", function()
    local fake_dump = fixturesLoader.twig()
    twig.cache_update(fake_dump)
    local actual = twig.filter_filters("date")
    assert.is_equal(vim.tbl_count(actual), 2)
  end)

  it("find one should return not nil", function()
    local fake_dump = fixturesLoader.twig()
    twig.cache_update(fake_dump)
    local actual = twig.find_one_filter("date")
    assert.is_not_nil(actual)
  end)
end)

describe("twig globals", function()
  before_each(function()
    twig.cache_clear()
  end)
  it("should filter all globals", function()
    local fake_dump = fixturesLoader.twig()
    twig.cache_update(fake_dump)
    local actual = twig.filter_globals()
    assert.is_equal(vim.tbl_count(actual), 4)
  end)
  it("should filter globals by name", function()
    local fake_dump = fixturesLoader.twig()
    twig.cache_update(fake_dump)
    local actual = twig.filter_globals("app")
    assert.is_equal(vim.tbl_count(actual), 1)
  end)
  it("find one should return not nil", function()
    local fake_dump = fixturesLoader.twig()
    twig.cache_update(fake_dump)
    local actual = twig.find_one_global("app")
    assert.is_not_nil(actual)
  end)
end)

describe("twig loader_paths", function()
  before_each(function()
    twig.cache_clear()
  end)
  it("should filter all pathes", function()
    local fake_dump = fixturesLoader.twig()
    twig.cache_update(fake_dump)
    local actual = twig.filter_loader_paths()
    assert.is_equal(vim.tbl_count(actual), 3)
  end)
  it("should filter pathes by name", function()
    local fake_dump = fixturesLoader.twig()
    twig.cache_update(fake_dump)
    local actual = twig.filter_loader_paths("(None)")
    assert.is_equal(vim.tbl_count(actual), 1)
  end)
  it("find one should return not nil", function()
    local fake_dump = fixturesLoader.twig()
    twig.cache_update(fake_dump)
    local actual = twig.find_one_loader_path("(None)")
    assert.is_not_nil(actual)
  end)
end)
